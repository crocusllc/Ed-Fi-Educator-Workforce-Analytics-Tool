CREATE VIEW vw_Student AS

With RECURSIVE_SCHOOL_YEARS AS
 -- Anchor member: Get the starting school year for each Student assignment
 (   SELECT
        t.StudentUSI AS StudentID,
        t.EntryDate AS StartDate,
       CASE
            WHEN t.ExitWithdrawDate IS NULL THEN GETDATE()
            ELSE t.ExitWithdrawDate
        END
        AS EndDate,
        -- Calculate the start year of the school year based on StartDate (August 1st to July 31st)
        CASE
            WHEN MONTH(t.EntryDate) >= 8 THEN YEAR(t.EntryDate)
            ELSE YEAR(t.EntryDate) - 1
        END AS SchoolYearStart,
        -- Calculate the end year of the school year based on EndDate (August 1st to July 31st)
        -->>Added additional logic to ensure that the SchoolYearEnd field is never NULL.  
        -->>When no end date present, use current date
        CASE
            WHEN MONTH(t.ExitWithdrawDate) >= 8 AND t.ExitWithdrawDate is not null THEN YEAR(t.ExitWithdrawDate)
            WHEN MONTH(GETDATE()) >= 8 AND t.ExitWithdrawDate is null THEN YEAR(GETDATE())
            WHEN MONTH(t.ExitWithdrawDate) < 8 AND t.ExitWithdrawDate is not null THEN YEAR(t.ExitWithdrawDate)-1
            WHEN MONTH(GETDATE()) < 8 AND t.ExitWithdrawDate is null THEN YEAR(GETDATE())-1
        END AS SchoolYearEnd
    FROM
         [EdFi_Ods_Populated_Template].[edfi].[StudentSchoolAssociation] AS t

    UNION ALL

    -- Recursive member: Increment the school year until it exceeds the EndDate
    SELECT
        rsy.StudentID,
        rsy.StartDate,
        rsy.EndDate,
        rsy.SchoolYearStart + 1, -- Move to the next school year
        rsy.SchoolYearEnd
    FROM
        RECURSIVE_SCHOOL_YEARS rsy
    WHERE
        -- Continue recursion as long as the current school year (plus 1 for the next iteration)
        -- is less than or equal to the calculated end school year for the assignment.
        rsy.SchoolYearStart + 1 <= rsy.SchoolYearEnd
)

SELECT 
    rsy.StudentID,
    -- Format the school year as 'YYYY-YYYY+1' based on the August-July definition
    CAST(rsy.SchoolYearStart AS NVARCHAR(4)) + '-' + CAST(rsy.SchoolYearStart + 1 AS NVARCHAR(4)) AS SchoolYear,
    rsy.SchoolYearStart AS SchoolYearStart,--Added SchoolYearStart as it's own field so that it can be used in Retention calculations

	stud.[StudentUSI]
	,stud.[FirstName]
	,stud.[LastSurname]
	,ssa.[EntryDate]
	,ssa.[ExitWithdrawDate]
	,school.[NameOfInstitution] AS Campus
	,school.[EducationOrganizationId] AS SchoolId
	,lea.[NameOfInstitution] AS District
	,lea.[EducationOrganizationId] AS LEAId
	,r.[ShortDescription] AS RaceEthnic

FROM
    RECURSIVE_SCHOOL_YEARS rsy
INNER JOIN [EdFi_Ods_Populated_Template].[edfi].[StudentSchoolAssociation] as ssa
    ON rsy.StudentID = ssa.StudentUSI
    AND rsy.StartDate = ssa.EntryDate
	LEFT JOIN   [EdFi_Ods_Populated_Template].[edfi].[Student] AS stud --then adding student details for enrollment
		ON ssa.StudentUSI = stud.StudentUSI
	LEFT JOIN [EdFi_Ods_Populated_Template].[edfi].[EducationOrganization] AS school --then seoa joined to school to get School Name
		on school.EducationOrganizationId = ssa.SchoolId
	LEFT JOIN [EdFi_Ods_Populated_Template].[edfi].[School] AS SchoolLEA --now join school to get associated LEA
		ON SchoolLEA.SchoolId = ssa.SchoolId
	LEFT JOIN [EdFi_Ods_Populated_Template].[edfi].[EducationOrganization] AS lea --finally join seoa again to get LEA Name
		ON lea.EducationOrganizationId = SchoolLEA.LocalEducationAgencyId
	LEFT JOIN  [EdFi_Ods_Populated_Template].[edfi].[StudentEducationOrganizationAssociationRace] AS studRace --get race association
		ON StudRace.EducationOrganizationId = lea.EducationOrganizationId AND StudRace.StudentUSI = ssa.StudentUSI -- race per student per school
	LEFT JOIN [EdFi_Ods_Populated_Template].[edfi].[Descriptor] as r
		ON r.DescriptorId = studRace.RaceDescriptorId
WHERE
    -- Ensure that the generated school year actually overlaps with the student's association period.
    -- This filters out school years that might be generated by the recursion but don't
    -- truly fall within the student's active association dates.
    (rsy.EndDate IS NULL OR DATEFROMPARTS(rsy.SchoolYearStart, 8, 1) <= rsy.EndDate)
    AND
    (DATEFROMPARTS(rsy.SchoolYearStart + 1, 7, 31) >= rsy.StartDate)
